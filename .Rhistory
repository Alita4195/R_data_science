log()
log(8, base=2) # change default base to 2
print(log(8))
print(log(8, base=2)) # change default base to 2
log(8)
?log #or help("log")
log(2,3)
log(8,3)
log(8,2)
?"+"
data()
Co2
Co2
CO2
co2
pi
inf
Inf
c<- -1
# code to compute solution to quadratic
# equation of the form ax^2 + bx + c
# define the variables
a<- 3
b<- 2
c<- -1
# Now compute the solution
(-b + sqrt(b^2-4*a*c))
## code to compute solution to quadratic
## equation of the form ax^2 + bx + c
## define the variables
a<- 3
b<- 2
c<- -1
## Now compute the solution
(-b + sqrt(b^2-4*a*c))
class(a)
class(ls)
library(dslabs)
data("murders")
install.packages("dslabs")
data("murders")
install.packages("dslabs")
data("murders")
data("murders2")
data("murders")
install.packages("dslabs")
library(dslabs)
data("murders")
install.packages("dslabs")
class(murders)
str(murders)
head(murders)
head(murders)
murders$population
names(murders)
length(pop)
pop<- murders$population
length(pop)
class(pop)
pop<- murders$population
length(pop)
class(pop)
"a"
class(murders$state)
Z<- 3 < 2
Z<- 3 < 2
Z<- 3 < 2
Z
class(Z)
print(Z)
Z<- 3 < 2
Z
class(Z)
class(murders$region)
levels(murders$region)
## code to compute solution to quadratic
## equation of the form ax^2 + bx + c
## define the variables
a<- 1
b<- 2
c<- -1
## Now compute the solution
(-b + sqrt(b^2-4*a*c))/2a
## Now compute the solution
(-b + sqrt(b^2-4*a*c))/(2a)
## Now compute the solution
(-b + sqrt(b^2-4*a*c))/(2 a)
## Now compute the solution
(-b + sqrt(b^2-4*a*c))/2*a
## code to compute solution to quadratic
## equation of the form ax^2 + bx + c
## define the variables
a<- 1
b<- 4
c<- 2
## Now compute the solution
(-b + sqrt(b^2-4*a*c))/2*a
## code to compute solution to quadratic
## equation of the form ax^2 + bx + c
## define the variables
a<- 1
b<- 4
c<- 2
## Now compute the solution
(-b - sqrt(b^2-4*a*c))/2*a
## code to compute solution to quadratic
## equation of the form ax^2 + bx + c
## define the variables
a<- 2
b<- -1
c<- -4
## Now compute the solution
(-b - sqrt(b^2-4*a*c))/2*a
## code to compute solution to quadratic
## equation of the form ax^2 + bx + c
## define the variables
a<- 2
b<- -1
c<- -4
## Now compute the solution
(-b + sqrt(b^2-4*a*c))/2*a
# Print the solutions with 3 significant digits
cat("The solutions are:", signif(x1, 3), "and", signif(x2, 3), "\n")
a <- 2
b <- -1
c <- -4
# Calculate the discriminant
discriminant <- b^2 - 4 * a * c
# Calculate the two solutions
x1 <- (-b + sqrt(discriminant)) / (2 * a)
x2 <- (-b - sqrt(discriminant)) / (2 * a)
# Print the solutions with 3 significant digits
cat("The solutions are:", signif(x1, 3), "and", signif(x2, 3), "\n")
log(1024, base=4)
```{r}
data(movielens)
library(dslabs)
data(movielens)
library(dslabs)
data(movielens)
library(dslabs)
data(movielens)
library(dslabs)
data(movielens)
library(dslabs)
data(movielens)
str(movielens)
class(movielens$title)
class(movielens$genres)
levels(movielens$genres)
nlevels(movielens$genres)
codes <- c(380, 124, 818) #c stands for concatenate
country <- c("Italy" , "Canada", "Egypt" )
class(codes)
codes <- c("Italy"=380, "Canada"=124, "Egypt"=818)
class(codes)
codes <- c("Italy"=380, "Canada"=124, "Egypt"=818)
codes
class(codes)
codes <- c(380, 124, 818)
country <- c("Italy" , "Canada", "Egypt" )
names(codes)<- country
codes
seq(1,10)
seq(1, 10, 2)
seq(1,10)
seq(1, 10, 2)
seq(1,10)
seq(1, 10, 2)
1:10
codes[2]
codes[2]
codes[c(1,3)]
codes[2]
codes[c(1,3)]
codes[1:2]
codes["canada"]
codes[2]
codes[c(1,3)]
codes[1:2]
codes["canada"]
codes[2]
codes[c(1,3)]
codes[1:2]
codes["Canada"]
codes[380]
codes[2]
codes[c(1,3)]
codes[1:2]
codes["Canada"]
codes[380]
codes[c("Egypt", "Italy")]
codes[2]
codes[c(1,3)]
codes[1:2]
codes["Canada"]
codes[380]
codes[c("Egypt", "Italy")]
x <- c(1, "Canada", 3)
x <- c(1, "Canada", 3)
x
x<- 1:5
y<- as.character(x)
y
x<- 1:5
y<- as.character(x)
y
as.numeric(y)
y
x<- 1:5
y<- as.character(x)
y
as.numeric(y)
x<- c("1","b","3")
as.numeric(x)
?"names"
v <- c(a = 1, b = 2, c = 3)
names(v)
names(codes)
codes <- c(380, 124, 818)
country <- c("Italy" , "Canada", "Egypt" )
names(codes)<- country
codes
names(codes)
codes <- c(380, 124, 818)
country <- c("Italy" , "Canada", "Egypt" )
names(codes)
names(codes)<- country
codes
names(codes)
q()
class(3L)
3L-3
class(a)
a<- seq(1, 10)
class(a)
a<- seq(1, 10)
class(a)
class(3L)
3L-3
class(3L)
3L-3
x <- c(1, 3, 5,"a")
class(x)
x <- c(1, 3, 5,"a")
class(x)
as.numeric(x)
x
x <- c(1, 3, 5,"a")
class(x)
as.numeric(x)
x
x <- c(1, 3, 5,"a")
class(x)
x<- as.numeric(x)
class(x)
x <- c(1, 3, 5,"a")
class(x)
x<- as.numeric(x)
x
class(x)
library(dslabs)
data(murders)
sort(murders$total)
x<- c(31, 4, 15, 92, 65)
sort(x)
x<- c(31, 4, 15, 92, 65)
sort(x)
order(x)
murders$state[1:10]
murders$abb[index]
index<- order(murders$total)
murders$abb[index]
sort(murders$total)
murders[sort(murders$total)]
murders(sort(murders$total)ï¼‰
murders(sort(murders$total))
max(murders$total)
max(murders$total)
max_index<- which.max(murders$total)
max(murders$total)
max_index<- which.max(murders$total)
max_index
max(murders$total)
max_index<- which.max(murders$total)
max_index
murders$state[max_index]
x<- c(31,4,15)
rank(x)
data(murders)
data("murders")
library(dslabs)
data(murders)
library(dslabs)
data("murders")
install.packages("dslabs")
library(dslabs)
data("murders") #the data is stored in the object murders
install.packages("dslabs")
library(dslabs)
data(murders)
class(data)
library(dslabs)
data(murders)
class(murders)
library(dslabs)
data(murders)
class(murders)
str(murders)
pop<- murders$population
library(dslabs)
data(murders)
class(murders)
str(murders)
pop<- murders$population
sort(pop)
min_index<- which.min(pop)
murders$population[min_index]
knitr::opts_chunk$set(echo = TRUE)
temp <- c(35, 88, 42, 84, 81, 30)
city <- c("Beijing", "Lagos", "Paris", "Rio de Janeiro", "San Juan", "Toronto")
city_temps <- data.frame(name = city, temperature = temp)
View(city_temps)
temp <- c(35, 88, 42, 84, 81, 30)
city <- c("Beijing", "Lagos", "Paris", "Rio de Janeiro", "San Juan", "Toronto")
city_temps <- data.frame(name = city, temperature = temp)
View(city_temps)
q()
murders$state[which.max(murders$population)]
murder_rate<- murders$total/murders$population
murder_rate<- murders$total/murders$population
murder_rate
str(murders)
murder_rate<- murders$total/murders$population*100000
murder_rate<- murders$total/murders$population*100000
murder_rate
murders$state[which.max(murder_rate)]
murders$state[order(murder_rate, decreasing = TRUE]
murders$state[order(murder_rate, decreasing = TRUE)]
# Define an object `x` with the numbers 1 through 100
x <- 1:100
# Compute the sum
sum(1/x^2)
murder_rate<- murders$total/murders$population*100000
mean(murder_rate)
name <- c("Mandi", "Amy", "Nicole", "Olivia")
distance <- c(0.8, 3.1, 2.8, 4.0)
time <- c(10, 30, 40, 50)
time<-time/60
speed<- distance/time
name <- c("Mandi", "Amy", "Nicole", "Olivia")
distance <- c(0.8, 3.1, 2.8, 4.0)
time <- c(10, 30, 40, 50)
time<-time/60
speed<- distance/time
name <- c("Mandi", "Amy", "Nicole", "Olivia")
distance <- c(0.8, 3.1, 2.8, 4.0)
time <- c(10, 30, 40, 50)
time<-time/60
speed<- distance/time
speed
name <- c("Mandi", "Amy", "Nicole", "Olivia")
distance <- c(0.8, 3.1, 2.8, 4.0)
time <- c(10, 30, 40, 50)
time<-time/60
speed<- distance/time
speed
running_test<- data.frame(name,speed)
str(running_test)
name <- c("Mandi", "Amy", "Nicole", "Olivia")
distance <- c(0.8, 3.1, 2.8, 4.0)
time <- c(10, 30, 40, 50)
time<-time/60
time
speed<- distance/time
speed
running_test<- data.frame(name,speed)
str(running_test)
index<- murder_rate < 0.71
index<- murder_rate < 0.71
index
index<- murder_rate <= 0.71
index
murders$state[index]
sun(index)
sum(index)
head(murders)
safe<- murder_rate<1
mueders(safe_index)
head(murders)
west_index<- murders$region=="West"
safe_index<- murder_rate<1
murders(safe_index)
head(murders)
west_index<- murders$region=="West"
safe_index<- murder_rate<1
murders[safe_index]
head(murders)
west_index<- murders$region=="West"
safe_index<- murder_rate<1
murders$state[safe_index]
head(murders)
west_index<- murders$region=="West"
safe_index<- murder_rate<1
murders$state[safe_index&west_index]
head(murders)
west_index<- murders$region=="West"
safe_index<- murder_rate<1
murders$state[safe_index&west_index]
west_index<- murders$region=="West"
safe_index<- murder_rate<1
murders$state[safe_index&west_index]
x<- c(FALSE, TRUE, FALSE, TRUE, TRUE, FALSE)
which(x)
index<- which(murders$state=="Massachusetts")
index<- which(murders$state=="Massachusetts")
index
murder_rate(index)
murder_rate[index]
murder_rate
index<- match(c("New York", "Florida", "Texas"), murders$state)
index
murder_rate[index]
y%in%
```
x<- c("a","b", "c", "d")
y<- c("a", "e")
y%in%x
head(murders)
str(murders)
package(dplyr)
library(dplyr)
library(dplyr)
murders<- mutate(murders, rate=total/population*100000)
str(murders)
filter(murders, rate<=0.71)
filter(new_data_table, rate< =0.71)
new_data_table <- select(murders, state, region, rate)
filter(new_data_table, rate< =0.71)
new_data_table <- select(murders, state, region, rate)
filter(new_data_table, rate<= 0.71)
murders|select(state, region, rate)|filter(rate<=0.71)
murders|select(state, region, rate)|filter(rate<=0.71)
murders %>% select(state, region, rate) %>% filter(rate<=0.71)
grades
grades<- data.frame(names=c("John", "Meggie", "Frank"), + math=c(60, 65, 50) + English=c(68, 98, 99))
grades<- data.frame(names = c("John", "Meggie", "Frank"), + math = c(60, 65, 50) + English = c(68, 98, 99))
grades<- data.frame(names = c("John", "Meggie", "Frank"), math = c(60, 65, 50), English = c(68, 98, 99))
grades
class(grades$names)
grades<- data.frame(names = c("John", "Meggie", "Frank"), math = c(60, 65, 50), English = c(68, 98, 99))
grades
class(grades$names)
mutate(murders, rate =  total / population * 100000, rank = (-rate)) %>% select(state, rate, rank)
plot(population, total)
plot(murders$population, murders$total)
hist(murders$rate)
boxplt(murders, rate~region)
boxplot(murders, rate~region)
boxplot(data=murders, rate~region)
a<- 2
if (a!=0)/{
a<- 2
if (a!=0)/{
a<- 2
if (a!=0)/{
a <- 2
if (a != 0) {
print(1/a)
} else {
"a cannot be 0"
}
ind <- which.min(murder_rate)
if (murder_rate[ind]<0.5){
print(murder_rate[ind])
} else{
print("no state has such a low murder rate")
}
ind <- which.min(murder_rate)
if (murder_rate[ind]<0.5){
print(murders$state[ind])
} else{
print("no state has such a low murder rate")
}
knitr::opts_chunk$set(echo = TRUE)
avg<- function(x){ #avg
s<- sum(x)
n<- length(x)
s/n
}
x<- 3
avg<- function(x){ #avg
s<- sum(x)
n<- length(x)
s/n
}
x<- 3
avg(x)
avg<- function(x){ #avg
s<- sum(x)
n<- length(x)
s/n
}
x<- 33
avg(x)
avg<- function(x){ #avg
s<- sum(x)
n<- length(x)
s/n
}
x<- 1:5
avg(x)
